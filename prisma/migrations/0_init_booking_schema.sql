-- =================================================================
--  0. CLEANUP (for re-runnability)
-- =================================================================
-- Drop triggers first
drop trigger if exists on_auth_user_created on auth.users;

-- Drop tables
drop table if exists public.bookings cascade;
drop table if exists public.available_slots cascade;
drop table if exists public.student_coach_assignments cascade;
drop table if exists public.coaches cascade;
drop table if exists public.profiles cascade;

-- Drop functions
drop function if exists public.handle_new_user();
drop function if exists public.get_my_role();
drop function if exists public.get_assigned_coach(uuid);

-- Drop types
drop type if exists public.booking_status;
drop type if exists public.user_role;


-- =================================================================
--  1. ENUMERATED TYPES
-- =================================================================

-- User roles for the application
create type public.user_role as enum ('student', 'coach', 'admin');

-- Status for bookings
create type public.booking_status as enum ('confirmed', 'cancelled_by_student', 'cancelled_by_coach');


-- =================================================================
--  2. TABLES
-- =================================================================

-- Profiles table - Extends auth.users with app-specific data
create table public.profiles (
  id uuid not null primary key references auth.users(id) on delete cascade,
  full_name text,
  avatar_url text,
  role public.user_role not null default 'student'
);
comment on table public.profiles is 'User profile information, linked to authentication.';


-- Coaches table - Stores additional details for users with the coach role
create table public.coaches (
  id uuid not null primary key references public.profiles(id) on delete cascade,
  bio text,
  specialization text
);
comment on table public.coaches is 'Specific details for coaches.';


-- Student-Coach Assignments - Maps students to their designated coach
create table public.student_coach_assignments (
  id bigint generated by default as identity primary key,
  student_id uuid not null references public.profiles(id) on delete cascade,
  coach_id uuid not null references public.profiles(id) on delete cascade,
  unique(student_id) -- A student can only be assigned to one coach
);
comment on table public.student_coach_assignments is 'Maps students to their single assigned coach.';


-- Available Slots - Time slots that coaches make available for booking
create table public.available_slots (
  id bigint generated by default as identity primary key,
  coach_id uuid not null references public.profiles(id) on delete cascade,
  start_time timestamptz not null,
  end_time timestamptz not null,
  is_booked boolean not null default false
);
comment on table public.available_slots is '30-minute availability slots for coaches.';


-- Bookings - Records of student bookings for available slots
create table public.bookings (
  id bigint generated by default as identity primary key,
  student_id uuid not null references public.profiles(id) on delete cascade,
  slot_id bigint not null unique references public.available_slots(id), -- A slot can only be booked once
  status public.booking_status not null default 'confirmed',
  created_at timestamptz not null default now()
);
comment on table public.bookings is 'Student bookings for coach time slots.';


-- =================================================================
--  3. TRIGGERS & FUNCTIONS
-- =================================================================

-- Function to create a new profile when a user signs up
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

-- Trigger to execute the function after a new user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- =================================================================
--  4. HELPER FUNCTIONS FOR RLS
-- =================================================================

-- Get the role of the currently authenticated user
create or replace function public.get_my_role()
returns public.user_role
language sql
stable
as $$
  select role from public.profiles where id = auth.uid();
$$;

-- Get the assigned coach for a given student
create or replace function public.get_assigned_coach(p_student_id uuid)
returns uuid
language sql
stable
as $$
  select coach_id from public.student_coach_assignments where student_id = p_student_id;
$$;


-- =================================================================
--  5. ROW LEVEL SECURITY (RLS)
-- =================================================================

-- Enable RLS on all tables
alter table public.profiles enable row level security;
alter table public.coaches enable row level security;
alter table public.student_coach_assignments enable row level security;
alter table public.available_slots enable row level security;
alter table public.bookings enable row level security;


-- -----------------------------------------------------------------
-- RLS Policies for `profiles`
-- -----------------------------------------------------------------
create policy "Allow users to see their own profile" on public.profiles for select
  using (auth.uid() = id);

create policy "Allow users to see their assigned coach/student profiles" on public.profiles for select
  using (
    -- Students can see their assigned coach
    (get_my_role() = 'student' and id = get_assigned_coach(auth.uid())) or
    -- Coaches can see their assigned students
    (get_my_role() = 'coach' and id in (select student_id from public.student_coach_assignments where coach_id = auth.uid()))
  );

create policy "Allow admin to see all profiles" on public.profiles for select
  using (get_my_role() = 'admin');

create policy "Allow users to update their own profile" on public.profiles for update
  using (auth.uid() = id);


-- -----------------------------------------------------------------
-- RLS Policies for `coaches`
-- -----------------------------------------------------------------
create policy "Allow anyone to see coach details" on public.coaches for select
  using (true);

create policy "Allow coaches to add their own details" on public.coaches for insert
  with check (auth.uid() = id and get_my_role() = 'coach');

create policy "Allow coaches to update their own details" on public.coaches for update
  using (auth.uid() = id and get_my_role() = 'coach')
  with check (auth.uid() = id);


-- -----------------------------------------------------------------
-- RLS Policies for `student_coach_assignments`
-- -----------------------------------------------------------------
create policy "Allow admin to manage assignments" on public.student_coach_assignments for all
  using (get_my_role() = 'admin');

create policy "Allow assigned student/coach to see their assignment" on public.student_coach_assignments for select
  using (get_my_role() in ('student', 'coach') and (student_id = auth.uid() or coach_id = auth.uid()));


-- -----------------------------------------------------------------
-- RLS Policies for `available_slots`
-- -----------------------------------------------------------------
create policy "Allow authenticated users to see available slots" on public.available_slots for select
  using (auth.role() = 'authenticated');

create policy "Allow coaches to insert their own slots" on public.available_slots for insert
  with check (get_my_role() = 'coach' and coach_id = auth.uid());

create policy "Allow coaches to update their own slots" on public.available_slots for update
  using (get_my_role() = 'coach' and coach_id = auth.uid());

create policy "Allow coaches to delete their own slots" on public.available_slots for delete
  using (get_my_role() = 'coach' and coach_id = auth.uid());


-- -----------------------------------------------------------------
-- RLS Policies for `bookings`
-- -----------------------------------------------------------------
create policy "Allow admin to manage all bookings" on public.bookings for all
  using (get_my_role() = 'admin');

create policy "Allow students to manage their own bookings" on public.bookings for all
  using (get_my_role() = 'student' and student_id = auth.uid())
  with check (
    -- Check that student is booking a slot with their assigned coach
    get_assigned_coach(auth.uid()) = (select coach_id from public.available_slots where id = slot_id)
  );

create policy "Allow coaches to see bookings for their slots" on public.bookings for select
  using (
    get_my_role() = 'coach' and
    exists (
      select 1
      from public.available_slots s
      where s.id = bookings.slot_id and s.coach_id = auth.uid()
    )
  );

create policy "Allow coaches to cancel bookings for their slots" on public.bookings for update
  using (
    get_my_role() = 'coach' and
    exists (
      select 1
      from public.available_slots s
      where s.id = bookings.slot_id and s.coach_id = auth.uid()
    )
  )
  with check (status = 'cancelled_by_coach'); 